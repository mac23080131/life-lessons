import { PrismaClient, ConceptDifficulty, ConceptRelType, QuestionType } from '@prisma/client';

const prisma = new PrismaClient();

export async function seedConcepts() {
  console.log('üå± Seeding Concept Knowledge Base...');

  // Create Categories
  const categories = await Promise.all([
    prisma.conceptCategory.upsert({
      where: { key: 'mindfulness' },
      update: {},
      create: {
        key: 'mindfulness',
        name: 'Ch√°nh ni·ªám',
        nameEn: 'Mindfulness',
        description: 'Th·ª±c h√†nh nh·∫≠n th·ª©c v√† s·ªëng t·ªânh th·ª©c trong hi·ªán t·∫°i',
        icon: 'üßò',
        color: '#8B5CF6',
        order: 1,
      },
    }),
    prisma.conceptCategory.upsert({
      where: { key: 'growth_mindset' },
      update: {},
      create: {
        key: 'growth_mindset',
        name: 'T∆∞ duy ph√°t tri·ªÉn',
        nameEn: 'Growth Mindset',
        description: 'Ni·ªÅm tin v·ªÅ kh·∫£ nƒÉng ph√°t tri·ªÉn v√† h·ªçc h·ªèi',
        icon: 'üå±',
        color: '#10B981',
        order: 2,
      },
    }),
    prisma.conceptCategory.upsert({
      where: { key: 'emotional_intelligence' },
      update: {},
      create: {
        key: 'emotional_intelligence',
        name: 'Tr√≠ tu·ªá c·∫£m x√∫c',
        nameEn: 'Emotional Intelligence',
        description: 'Hi·ªÉu v√† qu·∫£n l√Ω c·∫£m x√∫c b·∫£n th√¢n v√† ng∆∞·ªùi kh√°c',
        icon: 'üíô',
        color: '#3B82F6',
        order: 3,
      },
    }),
    prisma.conceptCategory.upsert({
      where: { key: 'resilience' },
      update: {},
      create: {
        key: 'resilience',
        name: 'Kh·∫£ nƒÉng ph·ª•c h·ªìi',
        nameEn: 'Resilience',
        description: 'S·ª©c m·∫°nh v∆∞·ª£t qua th·ª≠ th√°ch v√† ph√°t tri·ªÉn',
        icon: 'üí™',
        color: '#F59E0B',
        order: 4,
      },
    }),
    prisma.conceptCategory.upsert({
      where: { key: 'relationships' },
      update: {},
      create: {
        key: 'relationships',
        name: 'M·ªëi quan h·ªá',
        nameEn: 'Relationships',
        description: 'K·ªπ nƒÉng giao ti·∫øp v√† x√¢y d·ª±ng m·ªëi quan h·ªá',
        icon: 'ü§ù',
        color: '#EC4899',
        order: 5,
      },
    }),
  ]);

  console.log(`‚úÖ Created ${categories.length} categories`);

  // Create Sample Concepts
  const concepts = [];

  // 1. Growth Mindset - T∆∞ duy ph√°t tri·ªÉn
  const growthMindset = await prisma.concept.upsert({
    where: { key: 'growth_mindset_core' },
    update: {},
    create: {
      key: 'growth_mindset_core',
      slug: 'growth-mindset-core',
      title: 'T∆∞ duy ph√°t tri·ªÉn',
      titleEn: 'Growth Mindset',
      summary: 'Ni·ªÅm tin r·∫±ng kh·∫£ nƒÉng v√† tr√≠ tu·ªá c√≥ th·ªÉ ph√°t tri·ªÉn qua n·ªó l·ª±c v√† h·ªçc h·ªèi',
      summaryEn: 'The belief that abilities and intelligence can be developed through effort and learning',
      description: 'T∆∞ duy ph√°t tri·ªÉn l√† ni·ªÅm tin c·ªët l√µi r·∫±ng kh·∫£ nƒÉng c·ªßa b·∫°n kh√¥ng c·ªë ƒë·ªãnh m√† c√≥ th·ªÉ ƒë∆∞·ª£c ph√°t tri·ªÉn qua th·ªùi gian. Ng∆∞·ªùi c√≥ t∆∞ duy ph√°t tri·ªÉn nh√¨n nh·∫≠n th·∫•t b·∫°i nh∆∞ c∆° h·ªôi h·ªçc h·ªèi, ch·∫•p nh·∫≠n th·ª≠ th√°ch, v√† tin r·∫±ng n·ªó l·ª±c l√† con ƒë∆∞·ªùng ƒë·∫øn th√†nh th·∫°o. Ng∆∞·ª£c l·∫°i v·ªõi t∆∞ duy c·ªë ƒë·ªãnh (fixed mindset), t∆∞ duy ph√°t tri·ªÉn gi√∫p b·∫°n kh√¥ng b·ªã gi·ªõi h·∫°n b·ªüi kh·∫£ nƒÉng hi·ªán t·∫°i m√† lu√¥n tin v√†o ti·ªÅm nƒÉng ph√°t tri·ªÉn.',
      descriptionEn: 'Growth mindset is the core belief that your abilities are not fixed but can be developed over time. People with a growth mindset see failure as an opportunity to learn, embrace challenges, and believe that effort is the path to mastery. In contrast to a fixed mindset, growth mindset helps you not be limited by current abilities but always believe in potential for growth.',
      categoryId: categories[1].id, // growth_mindset
      tags: ['mindset', 'learning', 'development', 'resilience'],
      keywords: ['ph√°t tri·ªÉn', 'h·ªçc h·ªèi', 'n·ªó l·ª±c', 'growth', 'mindset'],
      difficulty: ConceptDifficulty.BEGINNER,
      aiContext: 'S·ª≠ d·ª•ng khi ph√°t hi·ªán user ƒëang t·ª± gi·ªõi h·∫°n ho·∫∑c s·ª£ th·∫•t b·∫°i. G·ª£i √Ω r·∫±ng th·∫•t b·∫°i l√† c∆° h·ªôi h·ªçc, kh√¥ng ph·∫£i ƒë√°nh gi√° nƒÉng l·ª±c.',
      source: 'Carol Dweck - Mindset: The New Psychology of Success',
      sourceUrl: 'https://www.mindsetworks.com/',
    },
  });
  concepts.push(growthMindset);

  // Add practices for Growth Mindset
  await prisma.conceptPractice.create({
    data: {
      conceptId: growthMindset.id,
      title: 'Thay ƒë·ªïi ng√¥n ng·ªØ t·ª± n√≥i',
      titleEn: 'Change Your Self-Talk',
      description: 'Thay th·∫ø "T√¥i kh√¥ng th·ªÉ" b·∫±ng "T√¥i ch∆∞a th·ªÉ"',
      descriptionEn: 'Replace "I can\'t" with "I can\'t yet"',
      steps: [
        'Nh·∫≠n di·ªán khi b·∫°n n√≥i "T√¥i kh√¥ng th·ªÉ l√†m ƒëi·ªÅu n√†y"',
        'T·∫°m d·ª´ng v√† th√™m t·ª´ "ch∆∞a" v√†o cu·ªëi c√¢u',
        'T·ª± h·ªèi: "T√¥i c·∫ßn h·ªçc g√¨ ƒë·ªÉ c√≥ th·ªÉ l√†m ƒë∆∞·ª£c?"',
        'Vi·∫øt ra 1-2 b∆∞·ªõc nh·ªè c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ngay',
      ],
      stepsEn: [
        'Notice when you say "I can\'t do this"',
        'Pause and add "yet" to the end',
        'Ask yourself: "What do I need to learn to be able to do this?"',
        'Write down 1-2 small steps you can start right away',
      ],
      duration: 5,
      difficulty: ConceptDifficulty.BEGINNER,
      order: 1,
    },
  });

  await prisma.conceptPractice.create({
    data: {
      conceptId: growthMindset.id,
      title: 'Nh·∫≠t k√Ω h·ªçc h·ªèi t·ª´ th·∫•t b·∫°i',
      titleEn: 'Learning from Failure Journal',
      description: 'Ghi l·∫°i b√†i h·ªçc t·ª´ nh·ªØng l·∫ßn "th·∫•t b·∫°i"',
      descriptionEn: 'Document lessons from "failures"',
      steps: [
        'Khi g·∫∑p th·∫•t b·∫°i, vi·∫øt ra: "ƒêi·ªÅu g√¨ ƒë√£ x·∫£y ra?"',
        'Ti·∫øp theo: "T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c g√¨?"',
        'Cu·ªëi c√πng: "L·∫ßn t·ªõi t√¥i s·∫Ω th·ª≠ c√°ch n√†o?"',
        'Review l·∫°i m·ªói th√°ng ƒë·ªÉ th·∫•y s·ª± ti·∫øn b·ªô',
      ],
      stepsEn: [
        'When facing failure, write: "What happened?"',
        'Next: "What did I learn?"',
        'Finally: "What will I try next time?"',
        'Review monthly to see progress',
      ],
      duration: 10,
      difficulty: ConceptDifficulty.BEGINNER,
      order: 2,
    },
  });

  // Add examples
  await prisma.conceptExample.create({
    data: {
      conceptId: growthMindset.id,
      title: 'Michael Jordan v√† th·∫•t b·∫°i',
      titleEn: 'Michael Jordan and Failure',
      text: 'Michael Jordan t·ª´ng n√≥i: "T√¥i ƒë√£ miss h∆°n 9,000 c√∫ n√©m trong s·ª± nghi·ªáp. T√¥i ƒë√£ thua g·∫ßn 300 tr·∫≠n. 26 l·∫ßn t√¥i ƒë∆∞·ª£c giao ph√≥ c√∫ n√©m quy·∫øt ƒë·ªãnh v√† miss. T√¥i ƒë√£ th·∫•t b·∫°i h·∫øt l·∫ßn n√†y ƒë·∫øn l·∫ßn kh√°c trong cu·ªôc ƒë·ªùi. V√† ƒë√≥ l√† l√Ω do t√¥i th√†nh c√¥ng."',
      textEn: 'Michael Jordan once said: "I\'ve missed more than 9,000 shots in my career. I\'ve lost almost 300 games. 26 times I\'ve been trusted to take the game-winning shot and missed. I\'ve failed over and over and over again in my life. And that is why I succeed."',
      source: 'Nike Ad',
      order: 1,
    },
  });

  await prisma.conceptExample.create({
    data: {
      conceptId: growthMindset.id,
      title: 'H·ªçc l·∫≠p tr√¨nh sau 30 tu·ªïi',
      titleEn: 'Learning Programming After 30',
      text: 'Nhi·ªÅu ng∆∞·ªùi nghƒ© h·ªç "qu√° gi√†" ƒë·ªÉ h·ªçc l·∫≠p tr√¨nh. Nh∆∞ng h√†ng ngh√¨n ng∆∞·ªùi ƒë√£ chuy·ªÉn ngh·ªÅ th√†nh c√¥ng ·ªü ƒë·ªô tu·ªïi 30, 40, th·∫≠m ch√≠ 50. Ch√¨a kh√≥a kh√¥ng ph·∫£i tu·ªïi t√°c m√† l√† ni·ªÅm tin r·∫±ng h·ªç c√≥ th·ªÉ h·ªçc ƒë∆∞·ª£c n·∫øu ƒë·∫ßu t∆∞ th·ªùi gian v√† n·ªó l·ª±c.',
      textEn: 'Many people think they\'re "too old" to learn programming. But thousands have successfully switched careers at 30, 40, even 50. The key isn\'t age but the belief that they can learn with time and effort.',
      order: 2,
    },
  });

  // Add questions
  await prisma.conceptQuestion.create({
    data: {
      conceptId: growthMindset.id,
      question: 'L·∫ßn g·∫ßn ƒë√¢y nh·∫•t b·∫°n tr√°nh m·ªôt th·ª≠ th√°ch v√¨ s·ª£ th·∫•t b·∫°i l√† khi n√†o? ƒêi·ªÅu g√¨ s·∫Ω kh√°c n·∫øu b·∫°n nh√¨n nh·∫≠n ƒë√≥ l√† c∆° h·ªôi h·ªçc h·ªèi?',
      questionEn: 'When was the last time you avoided a challenge because you feared failure? What would be different if you saw it as a learning opportunity?',
      type: QuestionType.REFLECTIVE,
      context: 'H·ªèi khi user th·ªÉ hi·ªán s·ª± n√© tr√°nh ho·∫∑c t·ª± gi·ªõi h·∫°n',
      contextEn: 'Ask when user shows avoidance or self-limitation',
      order: 1,
    },
  });

  await prisma.conceptQuestion.create({
    data: {
      conceptId: growthMindset.id,
      question: 'B·∫°n tin r·∫±ng ƒëi·ªÅu g√¨ trong b·∫°n l√† "c·ªë ƒë·ªãnh" v√† kh√¥ng th·ªÉ thay ƒë·ªïi? C√≥ b·∫±ng ch·ª©ng n√†o cho ni·ªÅm tin n√†y kh√¥ng?',
      questionEn: 'What do you believe about yourself that is "fixed" and cannot change? Is there evidence for this belief?',
      type: QuestionType.PROVOCATIVE,
      context: 'Th√°ch th·ª©c ni·ªÅm tin c·ªë ƒë·ªãnh v·ªÅ b·∫£n th√¢n',
      contextEn: 'Challenge fixed beliefs about self',
      order: 2,
    },
  });

  // 2. Gratitude Practice
  const gratitude = await prisma.concept.upsert({
    where: { key: 'gratitude_practice' },
    update: {},
    create: {
      key: 'gratitude_practice',
      slug: 'gratitude-practice',
      title: 'Th·ª±c h√†nh bi·∫øt ∆°n',
      titleEn: 'Gratitude Practice',
      summary: 'R√®n luy·ªán th√≥i quen nh·∫≠n di·ªán v√† tr√¢n tr·ªçng nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp trong cu·ªôc s·ªëng',
      summaryEn: 'Cultivate the habit of recognizing and appreciating good things in life',
      description: 'Th·ª±c h√†nh bi·∫øt ∆°n l√† vi·ªác c·ªë √Ω ch√∫ √Ω v√† ghi nh·∫≠n nh·ªØng ƒëi·ªÅu t√≠ch c·ª±c, d√π nh·ªè nh·∫∑t, trong cu·ªôc s·ªëng h√†ng ng√†y. Nghi√™n c·ª©u cho th·∫•y th·ª±c h√†nh bi·∫øt ∆°n th∆∞·ªùng xuy√™n gi√∫p tƒÉng h·∫°nh ph√∫c, gi·∫£m lo √¢u tr·∫ßm c·∫£m, c·∫£i thi·ªán gi·∫•c ng·ªß v√† tƒÉng c∆∞·ªùng s·ª©c kh·ªèe t·ªïng th·ªÉ. ƒê√¢y kh√¥ng ph·∫£i l√† ph·ªß nh·∫≠n kh√≥ khƒÉn m√† l√† ch·ªß ƒë·ªông nh√¨n nh·∫≠n c·∫£ m·∫∑t t√≠ch c·ª±c.',
      descriptionEn: 'Gratitude practice is intentionally noticing and acknowledging positive things, even small ones, in daily life. Research shows regular gratitude practice increases happiness, reduces anxiety and depression, improves sleep, and enhances overall health. This is not about denying difficulties but proactively seeing the positive side as well.',
      categoryId: categories[0].id, // mindfulness
      tags: ['gratitude', 'wellbeing', 'mindfulness', 'positive psychology'],
      keywords: ['bi·∫øt ∆°n', 'tri √¢n', 'h·∫°nh ph√∫c', 't√≠ch c·ª±c'],
      difficulty: ConceptDifficulty.BEGINNER,
      aiContext: 'G·ª£i √Ω khi user c√≥ xu h∆∞·ªõng ti√™u c·ª±c ho·∫∑c t·∫≠p trung v√†o thi·∫øu th·ªën. Gi√∫p shift perspective.',
    },
  });
  concepts.push(gratitude);

  // Add practices
  await prisma.conceptPractice.create({
    data: {
      conceptId: gratitude.id,
      title: '3 ƒëi·ªÅu bi·∫øt ∆°n bu·ªïi t·ªëi',
      titleEn: '3 Good Things at Night',
      description: 'M·ªói t·ªëi tr∆∞·ªõc khi ng·ªß, vi·∫øt ra 3 ƒëi·ªÅu b·∫°n bi·∫øt ∆°n trong ng√†y',
      descriptionEn: 'Each night before bed, write down 3 things you\'re grateful for',
      steps: [
        'Chu·∫©n b·ªã s·ªï tay ho·∫∑c app ghi ch√∫',
        'Tr∆∞·ªõc khi ng·ªß 10 ph√∫t, h·ªèi b·∫£n th√¢n: "H√¥m nay ƒëi·ªÅu g√¨ khi·∫øn t√¥i m·ªâm c∆∞·ªùi?"',
        'Vi·∫øt ra 3 ƒëi·ªÅu, c√≥ th·ªÉ r·∫•t nh·ªè: t√°ch c√† ph√™ ngon, l·ªùi c·∫£m ∆°n t·ª´ ƒë·ªìng nghi·ªáp, √°nh n·∫Øng chi·ªÅu ƒë·∫πp',
        'Kh√¥ng c·∫ßn d√†i, ch·ªâ 1 c√¢u cho m·ªói ƒëi·ªÅu',
        'ƒê·ªçc l·∫°i v√†o cu·ªëi tu·∫ßn ƒë·ªÉ th·∫•y pattern',
      ],
      stepsEn: [
        'Prepare notebook or note app',
        '10 minutes before sleep, ask yourself: "What made me smile today?"',
        'Write 3 things, can be very small: good coffee, thank you from colleague, beautiful evening sun',
        'No need to be long, just one sentence each',
        'Review at end of week to see patterns',
      ],
      duration: 5,
      difficulty: ConceptDifficulty.BEGINNER,
      order: 1,
    },
  });

  // 3. Self-Compassion
  const selfCompassion = await prisma.concept.upsert({
    where: { key: 'self_compassion' },
    update: {},
    create: {
      key: 'self_compassion',
      slug: 'self-compassion',
      title: 'T·ª± th∆∞∆°ng x√≥t',
      titleEn: 'Self-Compassion',
      summary: 'ƒê·ªëi x·ª≠ v·ªõi b·∫£n th√¢n b·∫±ng s·ª± t·ª≠ t·∫ø v√† th·∫•u hi·ªÉu nh∆∞ b·∫°n l√†m v·ªõi ng∆∞·ªùi b·∫°n th√¢n',
      summaryEn: 'Treating yourself with kindness and understanding like you would treat a close friend',
      description: 'T·ª± th∆∞∆°ng x√≥t l√† kh·∫£ nƒÉng ƒë·ªëi x·ª≠ v·ªõi b·∫£n th√¢n b·∫±ng s·ª± √¢n c·∫ßn, ƒë·∫∑c bi·ªát trong l√∫c m·∫Øc l·ªói hay ƒëau kh·ªï, thay v√¨ t·ª± ph√™ ph√°n kh·∫Øc nghi·ªát. Theo Ti·∫øn sƒ© Kristin Neff, t·ª± th∆∞∆°ng x√≥t bao g·ªìm 3 y·∫øu t·ªë: t·ª± t·ª≠ t·∫ø (self-kindness), √Ω th·ª©c v·ªÅ ƒëi·ªÉm chung c·ªßa con ng∆∞·ªùi (common humanity), v√† ch√°nh ni·ªám (mindfulness). Kh√°c v·ªõi l√≤ng t·ª± tr·ªçng d·ª±a v√†o th√†nh t√≠ch, t·ª± th∆∞∆°ng x√≥t l√† v√¥ ƒëi·ªÅu ki·ªán.',
      descriptionEn: 'Self-compassion is the ability to treat yourself with care, especially when making mistakes or suffering, rather than harsh self-criticism. According to Dr. Kristin Neff, self-compassion includes 3 elements: self-kindness, common humanity, and mindfulness. Unlike self-esteem based on achievement, self-compassion is unconditional.',
      categoryId: categories[2].id, // emotional_intelligence
      tags: ['self-care', 'compassion', 'emotional health', 'mindfulness'],
      keywords: ['t·ª± th∆∞∆°ng', 't·ª≠ t·∫ø', 'ch·∫•p nh·∫≠n', 'compassion'],
      difficulty: ConceptDifficulty.INTERMEDIATE,
      aiContext: 'D√πng khi user t·ª± ph√™ ph√°n b·∫£n th√¢n qu√° m·ª©c ho·∫∑c c·∫£m th·∫•y "kh√¥ng ƒë·ªß t·ªët". Nh·∫Øc nh·ªü r·∫±ng m·ªçi ng∆∞·ªùi ƒë·ªÅu m·∫Øc l·ªói.',
      source: 'Kristin Neff - Self-Compassion',
      sourceUrl: 'https://self-compassion.org/',
    },
  });
  concepts.push(selfCompassion);

  // Add practice
  await prisma.conceptPractice.create({
    data: {
      conceptId: selfCompassion.id,
      title: 'B·ª©c th∆∞ g·ª≠i b·∫£n th√¢n',
      titleEn: 'Letter to Yourself',
      description: 'Vi·∫øt th∆∞ cho b·∫£n th√¢n nh∆∞ vi·∫øt cho ng∆∞·ªùi b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn',
      descriptionEn: 'Write a letter to yourself as you would to a struggling friend',
      steps: [
        'Nghƒ© v·ªÅ m·ªôt t√¨nh hu·ªëng b·∫°n ƒëang t·ª± tr√°ch m√¨nh',
        'T∆∞·ªüng t∆∞·ª£ng ng∆∞·ªùi b·∫°n th√¢n ƒëang tr·∫£i qua ƒëi·ªÅu t∆∞∆°ng t·ª±',
        'Vi·∫øt th∆∞ cho "ng∆∞·ªùi b·∫°n" ƒë√≥: b·∫°n s·∫Ω n√≥i g√¨? An ·ªßi th·∫ø n√†o?',
        'B√¢y gi·ªù ƒë·ªçc l·∫°i th∆∞ n√†y, nh∆∞ng hi·ªÉu r·∫±ng ƒë√≥ l√† d√†nh cho ch√≠nh b·∫°n',
        'Ch√∫ √Ω c·∫£m gi√°c thay ƒë·ªïi th·∫ø n√†o',
      ],
      stepsEn: [
        'Think of a situation where you\'re blaming yourself',
        'Imagine a close friend going through the same thing',
        'Write a letter to that "friend": what would you say? How would you comfort them?',
        'Now read the letter again, understanding it\'s for yourself',
        'Notice how the feeling changes',
      ],
      duration: 15,
      difficulty: ConceptDifficulty.INTERMEDIATE,
      order: 1,
    },
  });

  // 4. Cognitive Reframing
  const reframing = await prisma.concept.upsert({
    where: { key: 'cognitive_reframing' },
    update: {},
    create: {
      key: 'cognitive_reframing',
      slug: 'cognitive-reframing',
      title: 'T√°i khung nh·∫≠n th·ª©c',
      titleEn: 'Cognitive Reframing',
      summary: 'Thay ƒë·ªïi c√°ch gi·∫£i th√≠ch m·ªôt s·ª± ki·ªán ƒë·ªÉ th·∫•y g√≥c nh√¨n kh√°c t√≠ch c·ª±c ho·∫∑c h·ªØu √≠ch h∆°n',
      summaryEn: 'Changing the way you interpret an event to see a different, more positive or useful perspective',
      description: 'T√°i khung nh·∫≠n th·ª©c l√† k·ªπ thu·∫≠t t√¢m l√Ω nh·∫≠n th·ª©c h√†nh vi (CBT) gi√∫p thay ƒë·ªïi c√°ch b·∫°n gi·∫£i th√≠ch m·ªôt t√¨nh hu·ªëng. C√πng m·ªôt s·ª± ki·ªán, tu·ª≥ c√°ch nh√¨n, c√≥ th·ªÉ l√† "th·∫£m ho·∫°" ho·∫∑c "th·ª≠ th√°ch". Reframing kh√¥ng ph·∫£i t·ª± l·ª´a d·ªëi m√† l√† ch·ªß ƒë·ªông t√¨m g√≥c nh√¨n c√¢n b·∫±ng h∆°n. V√≠ d·ª•: "T√¥i b·ªã t·ª´ ch·ªëi" ‚Üí "T√¥i ƒë∆∞·ª£c ph·∫£n h·ªìi ƒë·ªÉ c·∫£i thi·ªán".',
      descriptionEn: 'Cognitive reframing is a CBT technique that helps change how you interpret a situation. The same event can be a "disaster" or a "challenge" depending on perspective. Reframing is not self-deception but actively seeking a more balanced view. Example: "I was rejected" ‚Üí "I received feedback to improve".',
      categoryId: categories[2].id, // emotional_intelligence
      tags: ['CBT', 'perspective', 'resilience', 'thinking'],
      keywords: ['t√°i khung', 'g√≥c nh√¨n', 'suy nghƒ©', 'reframe'],
      difficulty: ConceptDifficulty.INTERMEDIATE,
      aiContext: 'D√πng khi user c√≥ suy nghƒ© ti√™u c·ª±c ho·∫∑c catastrophizing. G·ª£i √Ω c√°ch nh√¨n kh√°c.',
    },
  });
  concepts.push(reframing);

  await prisma.conceptPractice.create({
    data: {
      conceptId: reframing.id,
      title: 'B√†i t·∫≠p 3 c·ªôt',
      titleEn: 'Three Column Exercise',
      description: 'Ghi t√¨nh hu·ªëng, suy nghƒ© t·ª± ƒë·ªông, v√† suy nghƒ© thay th·∫ø',
      descriptionEn: 'Write situation, automatic thought, and alternative thought',
      steps: [
        'C·ªôt 1: T√¨nh hu·ªëng (V√≠ d·ª•: "S·∫øp kh√¥ng reply email c·ªßa t√¥i")',
        'C·ªôt 2: Suy nghƒ© t·ª± ƒë·ªông (V√≠ d·ª•: "S·∫øp kh√¥ng quan t√¢m ƒë·∫øn t√¥i")',
        'C·ªôt 3: Gi·∫£i th√≠ch kh√°c c√≥ th·ªÉ (V√≠ d·ª•: "S·∫øp ƒëang b·∫≠n, ho·∫∑c email b·ªã ch√¨m")',
        'T·ª± h·ªèi: "B·∫±ng ch·ª©ng cho suy nghƒ© n√†o nhi·ªÅu h∆°n?"',
        'Ch·ªçn c√°ch gi·∫£i th√≠ch c√¢n b·∫±ng nh·∫•t',
      ],
      stepsEn: [
        'Column 1: Situation (e.g., "Boss didn\'t reply to my email")',
        'Column 2: Automatic thought (e.g., "Boss doesn\'t care about me")',
        'Column 3: Alternative explanation (e.g., "Boss is busy, or email got buried")',
        'Ask: "Which thought has more evidence?"',
        'Choose the most balanced explanation',
      ],
      duration: 10,
      difficulty: ConceptDifficulty.INTERMEDIATE,
      order: 1,
    },
  });

  // 5. Active Listening
  const activeListening = await prisma.concept.upsert({
    where: { key: 'active_listening' },
    update: {},
    create: {
      key: 'active_listening',
      slug: 'active-listening',
      title: 'L·∫Øng nghe t√≠ch c·ª±c',
      titleEn: 'Active Listening',
      summary: 'K·ªπ nƒÉng l·∫Øng nghe v·ªõi to√†n b·ªô s·ª± ch√∫ √Ω, kh√¥ng ph√°n x√©t, ƒë·ªÉ th·ª±c s·ª± hi·ªÉu ng∆∞·ªùi kh√°c',
      summaryEn: 'The skill of listening with full attention, without judgment, to truly understand others',
      description: 'L·∫Øng nghe t√≠ch c·ª±c l√† k·ªπ nƒÉng giao ti·∫øp c·ªët l√µi: t·∫≠p trung ho√†n to√†n v√†o ng∆∞·ªùi n√≥i, kh√¥ng ng·∫Øt l·ªùi, kh√¥ng chu·∫©n b·ªã ph·∫£n b√°c trong ƒë·∫ßu. B·∫°n l·∫Øng nghe ƒë·ªÉ hi·ªÉu, kh√¥ng ph·∫£i ƒë·ªÉ tr·∫£ l·ªùi. C√°c k·ªπ thu·∫≠t bao g·ªìm: g·∫≠t ƒë·∫ßu, paraphrase l·∫°i, h·ªèi l√†m r√µ, v√† th·ªÉ hi·ªán empathy. Nghi√™n c·ª©u cho th·∫•y l·∫Øng nghe t√≠ch c·ª±c c·∫£i thi·ªán ƒë√°ng k·ªÉ ch·∫•t l∆∞·ª£ng m·ªëi quan h·ªá.',
      descriptionEn: 'Active listening is a core communication skill: focusing entirely on the speaker, not interrupting, not preparing rebuttals in your head. You listen to understand, not to respond. Techniques include: nodding, paraphrasing, asking clarifying questions, and showing empathy. Research shows active listening significantly improves relationship quality.',
      categoryId: categories[4].id, // relationships
      tags: ['communication', 'empathy', 'relationships', 'listening'],
      keywords: ['l·∫Øng nghe', 'giao ti·∫øp', 'th·∫•u hi·ªÉu', 'listening'],
      difficulty: ConceptDifficulty.INTERMEDIATE,
      aiContext: 'G·ª£i √Ω khi user g·∫∑p xung ƒë·ªôt giao ti·∫øp ho·∫∑c c·∫£m th·∫•y kh√¥ng ƒë∆∞·ª£c hi·ªÉu.',
    },
  });
  concepts.push(activeListening);

  await prisma.conceptPractice.create({
    data: {
      conceptId: activeListening.id,
      title: '2 ph√∫t l·∫Øng nghe kh√¥ng ng·∫Øt l·ªùi',
      titleEn: '2 Minutes of Uninterrupted Listening',
      description: 'L·∫Øng nghe ai ƒë√≥ trong 2 ph√∫t m√† kh√¥ng ng·∫Øt l·ªùi ho·∫∑c ph·∫£n h·ªìi',
      descriptionEn: 'Listen to someone for 2 minutes without interrupting or responding',
      steps: [
        'Ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën hi·ªÉu h∆°n (b·∫°n ƒë·ªùi, con c√°i, ƒë·ªìng nghi·ªáp)',
        'N√≥i: "T√¥i mu·ªën hi·ªÉu b·∫°n h∆°n. B·∫°n c√≥ th·ªÉ chia s·∫ª 2 ph√∫t v·ªÅ [topic] kh√¥ng?"',
        'Trong 2 ph√∫t ƒë√≥: ch·ªâ l·∫Øng nghe, g·∫≠t ƒë·∫ßu, tr√°nh ng·∫Øt l·ªùi',
        'Sau 2 ph√∫t, paraphrase: "T√¥i nghe b·∫°n n√≥i r·∫±ng... ƒë√∫ng kh√¥ng?"',
        'H·ªèi: "T√¥i c√≥ hi·ªÉu ƒë√∫ng kh√¥ng? C√≥ g√¨ t√¥i b·ªè s√≥t kh√¥ng?"',
      ],
      stepsEn: [
        'Choose someone you want to understand better (partner, child, colleague)',
        'Say: "I want to understand you better. Can you share 2 minutes about [topic]?"',
        'For those 2 minutes: just listen, nod, avoid interrupting',
        'After 2 minutes, paraphrase: "I hear you saying... is that right?"',
        'Ask: "Did I understand correctly? Did I miss anything?"',
      ],
      duration: 5,
      difficulty: ConceptDifficulty.INTERMEDIATE,
      order: 1,
    },
  });

  console.log(`‚úÖ Created ${concepts.length} concepts with practices, examples, and questions`);

  // Create Relations
  await prisma.conceptRelation.create({
    data: {
      aId: growthMindset.id,
      bId: reframing.id,
      type: ConceptRelType.RELATED,
    },
  });

  await prisma.conceptRelation.create({
    data: {
      aId: gratitude.id,
      bId: reframing.id,
      type: ConceptRelType.RELATED,
    },
  });

  await prisma.conceptRelation.create({
    data: {
      aId: selfCompassion.id,
      bId: activeListening.id,
      type: ConceptRelType.RELATED,
    },
  });

  console.log('‚úÖ Created concept relations');

  console.log('üéâ Concept Knowledge Base seeded successfully!');
}
