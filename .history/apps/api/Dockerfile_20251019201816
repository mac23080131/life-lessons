# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy root package files
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./

# Copy api package.json
COPY apps/api/package.json ./apps/api/

# Copy prisma schema
COPY prisma ./prisma

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY apps/api ./apps/api
COPY tsconfig.json ./

# Generate Prisma Client with dummy URL (just for build)
RUN DATABASE_URL="postgresql://user:pass@localhost:5432/db" pnpm --filter api exec prisma generate

# Build the application
RUN pnpm --filter api build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install pnpm and curl for health checks
RUN npm install -g pnpm && apk add --no-cache curl

# Copy package files
COPY --from=builder /app/package.json /app/pnpm-workspace.yaml /app/pnpm-lock.yaml ./
COPY --from=builder /app/apps/api/package.json ./apps/api/

# Copy prisma schema
COPY --from=builder /app/prisma ./prisma

# Install production dependencies only (includes @prisma/client)
RUN pnpm install --prod --frozen-lockfile

# Copy Prisma Client generated from builder
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Copy built application
COPY --from=builder /app/apps/api/dist ./apps/api/dist

# Set working directory for app
WORKDIR /app/apps/api

# Expose port (Railway will override with $PORT)
EXPOSE 3001

# Health check - Railway uses $PORT, defaults to 3001
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:${PORT:-3001}/health || exit 1

# Start command - migrate then start (simplified)
CMD ["sh", "-c", "npx prisma migrate deploy --schema=/app/prisma/schema.prisma && node dist/main.js"]
