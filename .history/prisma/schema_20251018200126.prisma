// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== Core Models ==========

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  passwordHash     String
  name             String?
  locale           String?      @default("vi")
  tz               String?      @default("Asia/Bangkok")
  privacyDefault   Privacy      @default(PRIVATE)
  role             UserRole     @default(USER)
  lessons          Lesson[]
  goals            Goal[]
  reminders        Reminder[]
  memberships      Membership[]
  reactions        Reaction[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

enum Privacy {
  PRIVATE
  GROUP
  LINK
  PUBLIC_ANON
}

enum Domain {
  INNER
  HEALTH
  RELATIONSHIP
  FINANCE
}

enum ReminderType {
  DAILY_EVENING
  WEEKLY_REVIEW
  MONTHLY_RETRO
}

model Lesson {
  id              String     @id @default(uuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentRaw      String     @db.Text
  contentSummary  String?    @db.Text
  domain          Domain
  tags            String[]
  mood            Int        // -2..+2
  resonance       Int        // 0..3
  gratitude       String?    @db.Text
  attachments     String[]
  visibility      Privacy    @default(PRIVATE)
  language        String?
  aiConcepts      String[]
  aiNextQuestion  String?    @db.Text
  shareToken      String?    @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  reactions       Reaction[]

  @@index([userId])
  @@index([domain])
  @@index([createdAt])
  @@map("lessons")
}

model Goal {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String   // "lesson_count"
  target     Int      @default(10000)
  current    Int      @default(0)
  sprintSize Int      @default(100)
  cadence    String   // daily|5x_week|custom
  status     String   @default("active") // active|paused|done
  sprints    Sprint[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@map("goals")
}

model Sprint {
  id        String   @id @default(uuid())
  goalId    String
  goal      Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  index     Int
  startAt   DateTime
  endAt     DateTime
  target    Int
  done      Int      @default(0)
  createdAt DateTime @default(now())

  @@index([goalId])
  @@map("sprints")
}

model Reminder {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ReminderType
  hour      Int          // local hour
  channel   String       // push|email
  enabled   Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId])
  @@map("reminders")
}

model Group {
  id        String       @id @default(uuid())
  name      String
  ownerId   String
  members   Membership[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("groups")
}

model Membership {
  id        String   @id @default(uuid())
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // admin|member
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
  @@index([userId])
  @@map("memberships")
}

model Reaction {
  id        String   @id @default(uuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "thank_you"
  createdAt DateTime @default(now())

  @@unique([lessonId, userId, type])
  @@index([lessonId])
  @@map("reactions")
}

model GroupLesson {
  id        String   @id @default(uuid())
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  sharedBy  String
  createdAt DateTime @default(now())

  @@unique([groupId, lessonId])
  @@index([groupId])
  @@index([lessonId])
  @@map("group_lessons")
}

// ========== Concept Knowledge Base Models ==========

model ConceptCategory {
  id        String    @id @default(uuid())
  key       String    @unique
  title     String
  concepts  Concept[]
  createdAt DateTime  @default(now())

  @@map("concept_categories")
}

model Concept {
  id          String             @id @default(uuid())
  key         String             @unique
  slug        String             @unique
  title       String
  summary     String             @db.Text
  definition  String             @db.Text
  language    String             @default("vi")
  tags        String[]
  categoryId  String
  category    ConceptCategory    @relation(fields: [categoryId], references: [id])
  source      String?
  version     Int                @default(1)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  aliases     ConceptAlias[]
  relationsA  ConceptRelation[]  @relation("ConceptA")
  relationsB  ConceptRelation[]  @relation("ConceptB")
  examples    ConceptExample[]
  embedding   ConceptEmbedding?

  @@index([categoryId])
  @@index([language])
  @@map("concepts")
}

model ConceptAlias {
  id        String  @id @default(uuid())
  conceptId String
  concept   Concept @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  alias     String
  language  String  @default("vi")

  @@index([conceptId])
  @@map("concept_aliases")
}

enum ConceptRelType {
  BROADER
  NARROWER
  RELATED
  ANTONYM
}

model ConceptRelation {
  id   String         @id @default(uuid())
  aId  String
  bId  String
  type ConceptRelType
  a    Concept        @relation("ConceptA", fields: [aId], references: [id], onDelete: Cascade)
  b    Concept        @relation("ConceptB", fields: [bId], references: [id], onDelete: Cascade)

  @@unique([aId, bId, type])
  @@map("concept_relations")
}

model ConceptExample {
  id        String  @id @default(uuid())
  conceptId String
  concept   Concept @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  text      String  @db.Text
  language  String  @default("vi")

  @@index([conceptId])
  @@map("concept_examples")
}

// For pgvector support - will be added via raw SQL migration
model ConceptEmbedding {
  id         String   @id @default(uuid())
  conceptId  String   @unique
  concept    Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  // embedding vector will be added via SQL migration
  // embedding Unsupported("vector(1024)")?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("concept_embeddings")
}
